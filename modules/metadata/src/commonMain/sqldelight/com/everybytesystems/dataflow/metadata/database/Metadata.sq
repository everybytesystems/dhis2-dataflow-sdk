-- Data Elements table
CREATE TABLE data_elements (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    short_name TEXT,
    code TEXT,
    description TEXT,
    value_type TEXT NOT NULL DEFAULT 'TEXT',
    aggregation_type TEXT NOT NULL DEFAULT 'SUM',
    domain_type TEXT NOT NULL DEFAULT 'AGGREGATE',
    category_combo_id TEXT,
    option_set_id TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Data Sets table
CREATE TABLE data_sets (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    short_name TEXT,
    code TEXT,
    description TEXT,
    period_type TEXT NOT NULL DEFAULT 'MONTHLY',
    category_combo_id TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Organisation Units table
CREATE TABLE organisation_units (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    short_name TEXT,
    code TEXT,
    description TEXT,
    level INTEGER,
    path TEXT,
    parent_id TEXT,
    geometry TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Categories table
CREATE TABLE categories (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Category Options table
CREATE TABLE category_options (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    short_name TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Category Combos table
CREATE TABLE category_combos (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Category Option Combos table
CREATE TABLE category_option_combos (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Option Sets table
CREATE TABLE option_sets (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    value_type TEXT NOT NULL DEFAULT 'TEXT',
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Options table
CREATE TABLE options (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT NOT NULL,
    option_set_id TEXT NOT NULL,
    sort_order INTEGER,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT,
    FOREIGN KEY (option_set_id) REFERENCES option_sets(id)
);

-- Programs table
CREATE TABLE programs (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    short_name TEXT,
    code TEXT,
    description TEXT,
    program_type TEXT NOT NULL DEFAULT 'WITH_REGISTRATION',
    category_combo_id TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Program Stages table
CREATE TABLE program_stages (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    description TEXT,
    program_id TEXT NOT NULL,
    sort_order INTEGER,
    repeatable INTEGER NOT NULL DEFAULT 0,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT,
    FOREIGN KEY (program_id) REFERENCES programs(id)
);

-- Tracked Entity Types table
CREATE TABLE tracked_entity_types (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    code TEXT,
    description TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Tracked Entity Attributes table
CREATE TABLE tracked_entity_attributes (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    display_name TEXT,
    short_name TEXT,
    code TEXT,
    description TEXT,
    value_type TEXT NOT NULL DEFAULT 'TEXT',
    unique_attribute INTEGER NOT NULL DEFAULT 0,
    option_set_id TEXT,
    created TEXT,
    last_updated TEXT,
    sync_version TEXT
);

-- Junction tables for many-to-many relationships

-- Data Set Elements
CREATE TABLE data_set_elements (
    data_set_id TEXT NOT NULL,
    data_element_id TEXT NOT NULL,
    category_combo_id TEXT,
    PRIMARY KEY (data_set_id, data_element_id),
    FOREIGN KEY (data_set_id) REFERENCES data_sets(id),
    FOREIGN KEY (data_element_id) REFERENCES data_elements(id)
);

-- Data Set Organisation Units
CREATE TABLE data_set_organisation_units (
    data_set_id TEXT NOT NULL,
    organisation_unit_id TEXT NOT NULL,
    PRIMARY KEY (data_set_id, organisation_unit_id),
    FOREIGN KEY (data_set_id) REFERENCES data_sets(id),
    FOREIGN KEY (organisation_unit_id) REFERENCES organisation_units(id)
);

-- Category Category Options
CREATE TABLE category_category_options (
    category_id TEXT NOT NULL,
    category_option_id TEXT NOT NULL,
    PRIMARY KEY (category_id, category_option_id),
    FOREIGN KEY (category_id) REFERENCES categories(id),
    FOREIGN KEY (category_option_id) REFERENCES category_options(id)
);

-- Category Combo Categories
CREATE TABLE category_combo_categories (
    category_combo_id TEXT NOT NULL,
    category_id TEXT NOT NULL,
    PRIMARY KEY (category_combo_id, category_id),
    FOREIGN KEY (category_combo_id) REFERENCES category_combos(id),
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

-- Program Organisation Units
CREATE TABLE program_organisation_units (
    program_id TEXT NOT NULL,
    organisation_unit_id TEXT NOT NULL,
    PRIMARY KEY (program_id, organisation_unit_id),
    FOREIGN KEY (program_id) REFERENCES programs(id),
    FOREIGN KEY (organisation_unit_id) REFERENCES organisation_units(id)
);

-- Program Stage Data Elements
CREATE TABLE program_stage_data_elements (
    id TEXT NOT NULL PRIMARY KEY,
    program_stage_id TEXT NOT NULL,
    data_element_id TEXT NOT NULL,
    compulsory INTEGER NOT NULL DEFAULT 0,
    allow_provided_elsewhere INTEGER NOT NULL DEFAULT 0,
    sort_order INTEGER,
    created TEXT,
    last_updated TEXT,
    FOREIGN KEY (program_stage_id) REFERENCES program_stages(id),
    FOREIGN KEY (data_element_id) REFERENCES data_elements(id)
);

-- Indexes for better query performance
CREATE INDEX idx_data_elements_code ON data_elements(code);
CREATE INDEX idx_data_elements_name ON data_elements(name);
CREATE INDEX idx_data_sets_code ON data_sets(code);
CREATE INDEX idx_organisation_units_code ON organisation_units(code);
CREATE INDEX idx_organisation_units_parent ON organisation_units(parent_id);
CREATE INDEX idx_organisation_units_level ON organisation_units(level);
CREATE INDEX idx_options_option_set ON options(option_set_id);
CREATE INDEX idx_program_stages_program ON program_stages(program_id);

-- Queries for Data Elements
selectAllDataElements:
SELECT * FROM data_elements ORDER BY name;

selectDataElementById:
SELECT * FROM data_elements WHERE id = ?;

selectDataElementsByIds:
SELECT * FROM data_elements WHERE id IN ?;

insertDataElement:
INSERT OR REPLACE INTO data_elements (
    id, name, display_name, short_name, code, description, value_type, 
    aggregation_type, domain_type, category_combo_id, option_set_id, 
    created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Data Sets
selectAllDataSets:
SELECT * FROM data_sets ORDER BY name;

selectDataSetById:
SELECT * FROM data_sets WHERE id = ?;

insertDataSet:
INSERT OR REPLACE INTO data_sets (
    id, name, display_name, short_name, code, description, period_type,
    category_combo_id, created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Organisation Units
selectAllOrganisationUnits:
SELECT * FROM organisation_units ORDER BY name;

selectOrganisationUnitById:
SELECT * FROM organisation_units WHERE id = ?;

selectOrganisationUnitsByLevel:
SELECT * FROM organisation_units WHERE level = ? ORDER BY name;

selectOrganisationUnitsByParent:
SELECT * FROM organisation_units WHERE parent_id = ? ORDER BY name;

insertOrganisationUnit:
INSERT OR REPLACE INTO organisation_units (
    id, name, display_name, short_name, code, description, level, path,
    parent_id, geometry, created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Programs
selectAllPrograms:
SELECT * FROM programs ORDER BY name;

selectProgramById:
SELECT * FROM programs WHERE id = ?;

insertProgram:
INSERT OR REPLACE INTO programs (
    id, name, display_name, short_name, code, description, program_type,
    category_combo_id, created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Program Stages
selectProgramStagesByProgram:
SELECT * FROM program_stages WHERE program_id = ? ORDER BY sort_order, name;

insertProgramStage:
INSERT OR REPLACE INTO program_stages (
    id, name, display_name, code, description, program_id, sort_order,
    repeatable, created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Options
selectOptionsByOptionSet:
SELECT * FROM options WHERE option_set_id = ? ORDER BY sort_order, name;

insertOption:
INSERT OR REPLACE INTO options (
    id, name, display_name, code, option_set_id, sort_order,
    created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Queries for Option Sets
selectAllOptionSets:
SELECT * FROM option_sets ORDER BY name;

selectOptionSetById:
SELECT * FROM option_sets WHERE id = ?;

insertOptionSet:
INSERT OR REPLACE INTO option_sets (
    id, name, display_name, code, value_type, created, last_updated, sync_version
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

-- Junction table queries
insertDataSetElement:
INSERT OR REPLACE INTO data_set_elements (data_set_id, data_element_id, category_combo_id)
VALUES (?, ?, ?);

selectDataElementsByDataSet:
SELECT de.* FROM data_elements de
JOIN data_set_elements dse ON de.id = dse.data_element_id
WHERE dse.data_set_id = ?
ORDER BY de.name;

-- Clear all metadata (for full sync)
clearAllMetadata:
DELETE FROM data_elements;
DELETE FROM data_sets;
DELETE FROM organisation_units;
DELETE FROM categories;
DELETE FROM category_options;
DELETE FROM category_combos;
DELETE FROM category_option_combos;
DELETE FROM option_sets;
DELETE FROM options;
DELETE FROM programs;
DELETE FROM program_stages;
DELETE FROM tracked_entity_types;
DELETE FROM tracked_entity_attributes;