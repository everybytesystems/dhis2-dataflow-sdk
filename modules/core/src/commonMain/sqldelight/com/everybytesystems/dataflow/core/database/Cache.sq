-- Cache table for storing API responses with TTL
CREATE TABLE cache_entries (
    id TEXT NOT NULL PRIMARY KEY,
    key TEXT NOT NULL UNIQUE,
    data TEXT NOT NULL,
    created_at INTEGER NOT NULL,
    expires_at INTEGER NOT NULL,
    etag TEXT,
    last_modified TEXT
);

-- Index for efficient lookups
CREATE INDEX idx_cache_key ON cache_entries(key);
CREATE INDEX idx_cache_expires ON cache_entries(expires_at);

-- Sync status tracking
CREATE TABLE sync_status (
    id TEXT NOT NULL PRIMARY KEY,
    entity_type TEXT NOT NULL,
    last_sync_time INTEGER NOT NULL,
    sync_version TEXT,
    status TEXT NOT NULL DEFAULT 'pending',
    error_message TEXT
);

CREATE INDEX idx_sync_entity_type ON sync_status(entity_type);

-- Offline queue for pending operations
CREATE TABLE offline_queue (
    id TEXT NOT NULL PRIMARY KEY,
    operation_type TEXT NOT NULL,
    endpoint TEXT NOT NULL,
    payload TEXT NOT NULL,
    created_at INTEGER NOT NULL,
    retry_count INTEGER NOT NULL DEFAULT 0,
    max_retries INTEGER NOT NULL DEFAULT 3,
    status TEXT NOT NULL DEFAULT 'pending',
    error_message TEXT,
    scheduled_at INTEGER
);

CREATE INDEX idx_queue_status ON offline_queue(status);
CREATE INDEX idx_queue_scheduled ON offline_queue(scheduled_at);

-- Queries for cache operations
selectCacheEntry:
SELECT * FROM cache_entries WHERE key = ? AND expires_at > ?;

insertCacheEntry:
INSERT OR REPLACE INTO cache_entries (id, key, data, created_at, expires_at, etag, last_modified)
VALUES (?, ?, ?, ?, ?, ?, ?);

deleteCacheEntry:
DELETE FROM cache_entries WHERE key = ?;

deleteExpiredEntries:
DELETE FROM cache_entries WHERE expires_at <= ?;

-- Queries for sync status
selectSyncStatus:
SELECT * FROM sync_status WHERE entity_type = ?;

insertOrUpdateSyncStatus:
INSERT OR REPLACE INTO sync_status (id, entity_type, last_sync_time, sync_version, status, error_message)
VALUES (?, ?, ?, ?, ?, ?);

-- Queries for offline queue
selectPendingOperations:
SELECT * FROM offline_queue WHERE status = 'pending' AND (scheduled_at IS NULL OR scheduled_at <= ?) ORDER BY created_at ASC;

insertQueueOperation:
INSERT INTO offline_queue (id, operation_type, endpoint, payload, created_at, retry_count, max_retries, status, scheduled_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

updateQueueOperationStatus:
UPDATE offline_queue SET status = ?, error_message = ?, retry_count = ?, scheduled_at = ? WHERE id = ?;

deleteQueueOperation:
DELETE FROM offline_queue WHERE id = ?;

selectFailedOperations:
SELECT * FROM offline_queue WHERE status = 'failed' ORDER BY created_at DESC;