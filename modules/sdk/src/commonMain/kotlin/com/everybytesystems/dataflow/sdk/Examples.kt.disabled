package com.everybytesystems.dataflow.sdk

import com.everybytesystems.dataflow.auth.AuthConfig
import com.everybytesystems.dataflow.core.network.ApiResponse
import com.everybytesystems.dataflow.sdk.services.*

/**
 * Example usage of the DHIS2 DataFlow SDK
 */
class SdkExamples {
    
    /**
     * Example: Initialize SDK and authenticate
     */
    suspend fun initializeAndAuthenticate() {
        // Initialize SDK using builder
        val sdkResult = DataFlowSdkBuilder()
            .baseUrl("https://play.dhis2.org/40.2.2")
            .basicAuth("admin", "district")
            .enableLogging(true)
            .connectTimeout(30_000)
            .requestTimeout(60_000)
            .maxRetries(3)
            .build()
        
        when (sdkResult) {
            is ApiResponse.Success -> {
                val sdk = sdkResult.data
                
                // Initialize the SDK
                sdk.initialize()
                
                // Authenticate with basic auth
                val authResult = sdk.authenticate(
                    AuthConfig.Basic(
                        username = "admin",
                        password = "district"
                    )
                )
                
                when (authResult) {
                    is ApiResponse.Success -> {
                        println("Authentication successful: ${authResult.data.displayName}")
                        
                        // Sync metadata
                        val syncResult = sdk.syncMetadata()
                        when (syncResult) {
                            is ApiResponse.Success -> {
                                println("Metadata sync successful")
                                
                                // Get data elements
                                val dataElements = sdk.getDataElements()
                                println("Found ${dataElements.size} data elements")
                                
                                // Get organisation units
                                val orgUnits = sdk.getOrganisationUnits()
                                println("Found ${orgUnits.size} organisation units")
                                
                                // Search for specific data elements
                                val searchResults = sdk.searchDataElements("ANC")
                                println("Found ${searchResults.size} ANC-related data elements")
                            }
                            is ApiResponse.Error -> {
                                println("Metadata sync failed: ${syncResult.message}")
                            }
                            is ApiResponse.Loading -> {
                                println("Metadata sync in progress...")
                            }
                        }
                    }
                    is ApiResponse.Error -> {
                        println("Authentication failed: ${authResult.message}")
                    }
                    is ApiResponse.Loading -> {
                        println("Authentication in progress...")
                    }
                }
                
                // Clean up
                sdk.close()
            }
            is ApiResponse.Error -> {
                println("Failed to create SDK: ${sdkResult.message}")
            }
            is ApiResponse.Loading -> {
                println("SDK creation in progress...")
            }
        }
    }
    
    /**
     * Example: Using Personal Access Token authentication
     */
    suspend fun authenticateWithPAT(
        databaseDriverFactory: DatabaseDriverFactory,
        secureStorageFactory: SecureStorageFactory
    ) {
        val sdk = DataFlowSdkBuilder()
            .baseUrl("https://dhis2.example.org")
            .databaseDriverFactory(databaseDriverFactory)
            .secureStorageFactory(secureStorageFactory)
            .build()
        
        sdk.initialize()
        
        // Authenticate with Personal Access Token
        val authResult = sdk.authenticate(
            AuthConfig.PersonalAccessToken(
                token = "d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092"
            )
        )
        
        when (authResult) {
            is ApiResponse.Success -> {
                println("PAT authentication successful")
                
                // Use the SDK services...
                val programs = sdk.metadataService.getPrograms()
                println("Found ${programs.size} programs")
            }
            is ApiResponse.Error -> {
                println("PAT authentication failed: ${authResult.message}")
            }
            is ApiResponse.Loading -> {
                println("PAT authentication in progress...")
            }
        }
        
        sdk.close()
    }
    
    /**
     * Example: Working with metadata
     */
    suspend fun workWithMetadata(sdk: DataFlowSdk) {
        // Get all data sets
        val dataSets = sdk.metadataService.getDataSets()
        println("Available data sets:")
        dataSets.forEach { dataSet ->
            println("- ${dataSet.name} (${dataSet.id})")
        }
        
        // Get data elements for a specific data set
        if (dataSets.isNotEmpty()) {
            val firstDataSet = dataSets.first()
            val dataElements = sdk.metadataService.getDataElementsForDataSet(firstDataSet.id)
            println("Data elements in ${firstDataSet.name}:")
            dataElements.forEach { element ->
                println("  - ${element.name} (${element.valueType})")
            }
        }
        
        // Get organisation unit hierarchy
        val rootOrgUnits = sdk.metadataService.getOrganisationUnitsByLevel(1)
        rootOrgUnits.forEach { rootUnit ->
            println("Root org unit: ${rootUnit.name}")
            val children = sdk.metadataService.getChildOrganisationUnits(rootUnit.id)
            children.forEach { child ->
                println("  - Child: ${child.name}")
            }
        }
        
        // Get programs and their stages
        val programs = sdk.metadataService.getPrograms()
        programs.forEach { program ->
            println("Program: ${program.name}")
            val stages = sdk.metadataService.getProgramStages(program.id)
            stages.forEach { stage ->
                println("  - Stage: ${stage.name}")
            }
        }
        
        // Work with option sets
        val optionSets = sdk.metadataService.getOptionSets()
        optionSets.forEach { optionSet ->
            println("Option Set: ${optionSet.name}")
            val options = sdk.metadataService.getOptions(optionSet.id)
            options.forEach { option ->
                println("  - Option: ${option.name} (${option.code})")
            }
        }
    }
    
    /**
     * Example: Handling authentication state
     */
    suspend fun handleAuthenticationState(sdk: DataFlowSdk) {
        // Check if already authenticated
        if (sdk.authManager.isAuthenticated()) {
            val currentUser = sdk.authManager.getCurrentUser()
            println("Already authenticated as: ${currentUser?.displayName}")
        } else {
            println("Not authenticated, please login")
        }
        
        // Listen to authentication state changes
        sdk.authManager.authState.collect { state ->
            when (state) {
                is com.everybytesystems.dataflow.auth.AuthState.Unauthenticated -> {
                    println("User is not authenticated")
                }
                is com.everybytesystems.dataflow.auth.AuthState.Authenticating -> {
                    println("Authentication in progress...")
                }
                is com.everybytesystems.dataflow.auth.AuthState.Authenticated -> {
                    println("User authenticated: ${state.user.displayName}")
                }
                is com.everybytesystems.dataflow.auth.AuthState.Error -> {
                    println("Authentication error: ${state.message}")
                }
            }
        }
    }
    
    /**
     * Example: Error handling and offline scenarios
     */
    suspend fun handleErrorsAndOffline(sdk: DataFlowSdk) {
        try {
            // Try to sync metadata
            val syncResult = sdk.metadataService.syncAll(forceRefresh = true)
            when (syncResult) {
                is ApiResponse.Success -> {
                    println("Online sync successful")
                }
                is ApiResponse.Error -> {
                    println("Sync failed, using cached data: ${syncResult.message}")
                    
                    // Still try to get cached data
                    val cachedDataElements = sdk.metadataService.getDataElements()
                    println("Using ${cachedDataElements.size} cached data elements")
                }
                is ApiResponse.Loading -> {
                    println("Sync in progress...")
                }
            }
        } catch (e: Exception) {
            println("Exception during sync: ${e.message}")
            
            // Fallback to cached data
            val cachedData = sdk.metadataService.getDataElements()
            println("Fallback: Using ${cachedData.size} cached data elements")
        }
    }
}